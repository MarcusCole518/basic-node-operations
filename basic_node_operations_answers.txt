Questions

1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.
    a. sort returned commands.js sorted alhabetically by line:
                    done(data);
            if(err) throw err;
        break;
        case "cat":
        case "echo":
        commandLibrary.cat(userInputArray.slice(1));
        commandLibrary.echo(userInputArray.slice(1).join(" "));
        const fileName = fullPath[0];
        done(userInput);
        fs.readFile(fileName, (err, data) => {
        });
    "cat": function(fullPath) {
    "echo": function(userInput) {
    const command = userInputArray[0];
    const userInputArray = userInput.split(" ");
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
    switch (command) {
    }
    }
    },
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
}
}
};

    b. wc printed the number of lines, words and characters(bytes) in commands.js:
        37      71     834 commands.js

    c. uniq sorted through commands.js and only outputted the lines that were unique:
        const fs = require("fs");

function done(output) {
    process.stdout.write(output);
    process.stdout.write('\nprompt > ');
}

function evaluateCmd(userInput) {

    const userInputArray = userInput.split(" ");
    const command = userInputArray[0];

    switch (command) {
        case "echo":
        commandLibrary.echo(userInputArray.slice(1).join(" "));
        break;
        case "cat":
        commandLibrary.cat(userInputArray.slice(1));
    }
}

const commandLibrary = {

    "echo": function(userInput) {
        done(userInput);
    },

    "cat": function(fullPath) {
        const fileName = fullPath[0];
        fs.readFile(fileName, (err, data) => {
            if(err) throw err;
            done(data);
        });
    }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.
    uniq commands.js | wc
      37      71     834

      Using this statement we can take the output of `uniq`, which are all of the lines of
      non-duplicate code, and pass it as the input of `wc` which altogether will return the
      number of unique lines, words, and characters in our file.